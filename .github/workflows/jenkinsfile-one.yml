name: jenkinsfile-one
defaults:
  --- {}
on:
  --- {}
env:
#  - TEST_PREFIX: test-IMAGE
#  - TEST_IMAGE: '"${env.TEST_PREFIX}:${env.BUILD_NUMBER}"'
#    TEST_IMAGE: '"${env.TEST_PREFIX}:${env.BUILD_NUMBER}"'
#  - TEST_CONTAINER: '"${env.TEST_PREFIX}-${env.BUILD_NUMBER}"'
#    TEST_CONTAINER: '"${env.TEST_PREFIX}-${env.BUILD_NUMBER}"'
#  - REGISTRY_ADDRESS: my.registry.address.com
#  - SLACK_CHANNEL: "#deployment-notifications"
#  - SLACK_TEAM_DOMAIN: MY-SLACK-TEAM
#  - SLACK_TOKEN: 
#    SLACK_TOKEN: 
#  - DEPLOY_URL: https://deployment.example.com/
#  - COMPOSE_FILE: docker-compose.yml
#  - REGISTRY_AUTH: 
#    REGISTRY_AUTH: 
#  - STACK_PREFIX: my-project-stack-name
#  lue: my project-stack-name
jobs:
  Prepare:
    steps:
#    - bitbucketStatusNotify:
#        key: buildState
#        value:
#          isLiteral: true
#          value: INPROGRESS
  Build and start test image:
    steps:
#    - sh:
#        key: script
#        value:
#          isLiteral: true
#          value: docker composer build
#      sh:
#        key: script
#        value:
#          isLiteral: true
#          value: docker compose up -d
  Run tests:
    steps:
#    - sh:
#        key: script
#        value:
#          isLiteral: true
#          value: docker compose exec -T php-fpm composer --no-ansi --no-interaction
#            tests ci
#      sh:
#        key: script
#        value:
#          isLiteral: true
#          value: docker compose exec -T php-fpm composer --no-ansi --no-interaction
#            behat ci
  Determine new version:
    steps:
#    - script:
#        key: scriptBlock
#        value:
#          isLiteral: true
#          value: | 
#            env.DEPLOY_VERSION = sh(returnStdout: true, script: "docker run  -rm -v '${env.WORKSPACE}':/repo:ro softonic/ci-version:0.1.0 --compatible-with package.json").trim()
#                                env.DEPLOY_MAJOR_VERSION = sh(returnStdout: true, script: "echo '${env.DEPLOY_VERSION}' | awk  F'[ .]' '{print \$1}'").trim()
#                                env.DEPLOY_COMMIT_HASH = sh(returnStdout: true, script: "git rev parse HEAD | cut -c1-7").trim()
#                                env.DEPLOY_BUILD_DATE = sh(returnStdout: true, script: "date  u +'%Y-%m-%dT%H:%M:%SZ'").trim()
  
                                  env.DEPLOY_STACK_NAME = "${env.STACK_PREFIX}-v${env.DEPLOY_MAJOR_VERSION}"
                                  env.IS_NEW_VERSION = sh(returnStdout: true, script: "[ '${env.DEPLOY_VERSION}' ] && echo 'YES'").trim()
  Create new version:
    steps:
#    - script:
#        key: scriptBlock
#        value:
#          isLiteral: true
#          value: | 
#            sshagent(['ci ssh']) {
#                                    sh """
#                                        git config user.email "ci user@email.com"
#                                        git config user.name "Jenkins"
#                                        git tag  a "v${env.DEPLOY_VERSION}" \
#                                             m "Generated by: ${env.JENKINS_URL}" \
#                                             m "Job: ${env.JOB_NAME}" \
#                                             m "Build: ${env.BUILD_NUMBER}" \
#                                             m "Env Branch: ${env.BRANCH_NAME}"
#                                        git push origin "v${env.DEPLOY_VERSION}"
#                                    """
#                                }
#      sh:
#        key: script
#        value:
#          isLiteral: false
#          value: '"docker login  u=$REGISTRY_AUTH_USR -p=$REGISTRY_AUTH_PSW ${env.REGISTRY_ADDRESS}"'
#      sh:
#        key: script
#        value:
#          isLiteral: false
#          value: '"docker compose -f ${env.COMPOSE_FILE} build"'
#      sh:
#        key: script
#        value:
#          isLiteral: false
#          value: '"docker compose -f ${env.COMPOSE_FILE} push"'
  Deploy to production:
    steps:
#    - sh:
#        key: script
#        value:
#          isLiteral: false
#          value: '"docker login  u=$REGISTRY_AUTH_USR -p=$REGISTRY_AUTH_PSW ${env.REGISTRY_ADDRESS}"'
#      sh:
#        key: script
#        value:
#          isLiteral: false
#          value: '"docker stack deploy ${env.DEPLOY_STACK_NAME}  c ${env.COMPOSE_FILE}
#             -with-registry-auth"'
